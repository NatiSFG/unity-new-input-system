//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/NinjaInputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NinjaInputAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NinjaInputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NinjaInputAsset"",
    ""maps"": [
        {
            ""name"": ""Orient"",
            ""id"": ""d4c45a4e-566d-4aef-a171-5f843008a9e2"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""01fc3173-b9c3-4b0b-91c2-228fd27d37e1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Invert"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""94733ce6-89b1-4acc-b015-36e62ecb0401"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bb34098f-6089-494f-830a-cfb8b105ea16"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f7a71eed-f8e5-46d4-9a87-31774b2e695b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Movement"",
            ""id"": ""6f858f24-cba7-4697-bf45-fc63c4612109"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a183ea36-f2af-4350-90c7-d75d8c916bb6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""021799a2-9d3e-4d23-8899-41d9d1af3bec"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e5d87fe1-ae6f-402a-b29a-1f36fac0bc9b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a2f857b2-eb73-4eea-bc7f-a1bd405e80c3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8bd1a478-b9bc-47a0-b281-64a66687e74c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8c3b2a86-28aa-43ae-8312-d90dd6eb4cce"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Toggle Action Maps"",
            ""id"": ""071147ec-d335-4c3e-99e4-dce264c93093"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""319d2fa8-9f3b-4fc3-baed-3584d244a8b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eaba7e26-7a30-4681-92f3-1eaa09b86596"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Orient
        m_Orient = asset.FindActionMap("Orient", throwIfNotFound: true);
        m_Orient_Rotate = m_Orient.FindAction("Rotate", throwIfNotFound: true);
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Movement = m_Movement.FindAction("Movement", throwIfNotFound: true);
        // Toggle Action Maps
        m_ToggleActionMaps = asset.FindActionMap("Toggle Action Maps", throwIfNotFound: true);
        m_ToggleActionMaps_Toggle = m_ToggleActionMaps.FindAction("Toggle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Orient
    private readonly InputActionMap m_Orient;
    private List<IOrientActions> m_OrientActionsCallbackInterfaces = new List<IOrientActions>();
    private readonly InputAction m_Orient_Rotate;
    public struct OrientActions
    {
        private @NinjaInputAsset m_Wrapper;
        public OrientActions(@NinjaInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_Orient_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Orient; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OrientActions set) { return set.Get(); }
        public void AddCallbacks(IOrientActions instance)
        {
            if (instance == null || m_Wrapper.m_OrientActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OrientActionsCallbackInterfaces.Add(instance);
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
        }

        private void UnregisterCallbacks(IOrientActions instance)
        {
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
        }

        public void RemoveCallbacks(IOrientActions instance)
        {
            if (m_Wrapper.m_OrientActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOrientActions instance)
        {
            foreach (var item in m_Wrapper.m_OrientActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OrientActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OrientActions @Orient => new OrientActions(this);

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Movement;
    public struct MovementActions
    {
        private @NinjaInputAsset m_Wrapper;
        public MovementActions(@NinjaInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Movement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Toggle Action Maps
    private readonly InputActionMap m_ToggleActionMaps;
    private List<IToggleActionMapsActions> m_ToggleActionMapsActionsCallbackInterfaces = new List<IToggleActionMapsActions>();
    private readonly InputAction m_ToggleActionMaps_Toggle;
    public struct ToggleActionMapsActions
    {
        private @NinjaInputAsset m_Wrapper;
        public ToggleActionMapsActions(@NinjaInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Toggle => m_Wrapper.m_ToggleActionMaps_Toggle;
        public InputActionMap Get() { return m_Wrapper.m_ToggleActionMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToggleActionMapsActions set) { return set.Get(); }
        public void AddCallbacks(IToggleActionMapsActions instance)
        {
            if (instance == null || m_Wrapper.m_ToggleActionMapsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ToggleActionMapsActionsCallbackInterfaces.Add(instance);
            @Toggle.started += instance.OnToggle;
            @Toggle.performed += instance.OnToggle;
            @Toggle.canceled += instance.OnToggle;
        }

        private void UnregisterCallbacks(IToggleActionMapsActions instance)
        {
            @Toggle.started -= instance.OnToggle;
            @Toggle.performed -= instance.OnToggle;
            @Toggle.canceled -= instance.OnToggle;
        }

        public void RemoveCallbacks(IToggleActionMapsActions instance)
        {
            if (m_Wrapper.m_ToggleActionMapsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IToggleActionMapsActions instance)
        {
            foreach (var item in m_Wrapper.m_ToggleActionMapsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ToggleActionMapsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ToggleActionMapsActions @ToggleActionMaps => new ToggleActionMapsActions(this);
    public interface IOrientActions
    {
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IToggleActionMapsActions
    {
        void OnToggle(InputAction.CallbackContext context);
    }
}
